import numpy as np
import matplotlib.pyplot as plt
from skimage.io import imread, imshow
from skimage.color import rgb2gray
from skimage.feature import match_template, peak_local_max
from skimage import transform
import os
import glob
import cv2
import pandas as pd

#Load images

img_dir=r"Enter the path to the folder where the images have been saved using the code Dual WebCam Setup using OpenCV"
data_path=os.path.join(img_dir,'*.jpg')
files=glob.iglob(data_path)
data,name=[],[]
for f in files:
    img=cv2.imread(f)
    img1=cv2.cvtColor(img,cv2.COLOR_RGB2GRAY)
    data.append(img1)
    #print(f)
    a=f[43:50]
    #print(a)
    name.append(a)
    
#print(len(data))
'''for i in range(len(data)):
    plt.imshow(data[i],cmap='gray')
    plt.show()'''

#Load the calibration templates for special points

img_dir=r"Enter the path to the folder where calibration templates are saved"
data_path=os.path.join(img_dir,'*.jpg')
files=glob.iglob(data_path)
t=[]
for f in files:
    img=cv2.imread(f)
    img1=cv2.cvtColor(img,cv2.COLOR_RGB2GRAY)
    t.append(img1)
    
#print(len(t))
'''for i in range(len(t)):
    plt.imshow(t[i],cmap='gray')
    plt.show()'''
    
#Load template for normal points. It should be present in the working directiory where Python is installed in the C drive

img=cv2.imread("Calibration Template.jpg")
img=cv2.cvtColor(img,cv2.COLOR_RGB2GRAY)

'''plt.imshow(img)
plt.show()'''

#Function for template matching

def find_template(image1,image2):
    result=match_template(image1,image2)
    coor_x,coor_y=np.unravel_index(np.argmax(result),result.shape)
    return coor_x,coor_y,image2,result

cord1,cord2=[],[]

#Detecting normal points

for i in range(len(data)):
    #print("Frame: {}".format(name[i]))
    temp=[]
    #plt.imshow(data[i],cmap='gray')
    x,y,template,result=find_template(data[i],img)
    for x,y in peak_local_max(result,threshold_abs=0.7):
        rect=plt.Rectangle((y,x),20,20,color='r',fc='none')
        #print(rect)
        a=rect.xy[0]
        a=(a+(a+15))/2
        b=rect.xy[1]
        b=(b+(b+15))/2
        temp.append([a,b])
        #c=plt.Circle((a,b),3,color='r',fc='r')
        #plt.gca().add_patch(c)
    cord1.append(temp)
    #plt.show()
    
#print(len(cord1))
#print(cord1)

#Detecting special points

for i in range(len(data)):
    #print("Frame: {}".format(name[i]))
    temp=[]
    #plt.imshow(data[i],cmap='gray')
    for j in range(len(t)):
        x,y,template,result=find_template(data[i],t[j])
        for x,y in peak_local_max(result,threshold_abs=0.95):
            rect=plt.Rectangle((y,x),20,20,color='r',fc='none')
            #print(rect)
            a=rect.xy[0]
            a=(a+(a+15))/2
            b=rect.xy[1]
            b=(b+(b+15))/2
            temp.append([a,b])
            #c=plt.Circle((a,b),3,color='r',fc='r')
            #plt.gca().add_patch(c)
        #plt.show()
    cord2.append(temp)
    
#print(len(cord1))
#print(len(cord2))

'''for i in range(len(cord2)):
    print(cord2[i])'''
    
for i in range(len(cord1)):
    #print(cord1[i])
    cord1[i]=sorted(cord1[i],key=lambda x:x[1],reverse=False)
    #print(cord1[i])
    
w=data[0].shape[0]/2
h=data[0].shape[1]/2

#print(w)
#print(h)

special=[]    
    
for i in range(len(cord2)):
    x1,x2,x3,y1,y2,y3,c1,c2,c3,temp=0,0,0,0,0,0,0,0,0,[]
    for j in range(len(cord2[i])):
        if cord2[i][j][0]>h and cord2[i][j][1]>w:
            x3+=cord2[i][j][0]
            y3+=cord2[i][j][1]
            c3+=1
        if cord2[i][j][0]>h and cord2[i][j][1]<w:
            x2+=cord2[i][j][0]
            y2+=cord2[i][j][1]
            c2+=1
        if cord2[i][j][0]<h and cord2[i][j][1]<w:
            x1+=cord2[i][j][0]
            y1+=cord2[i][j][1]
            c1+=1
    if c1 is not 0:
        x1=x1/c1
        y1=y1/c1
        temp.append([x1,y1])
    if c2 is not 0:
        x2=x2/c2
        y2=y2/c2
        temp.append([x2,y2])
    if c3 is not 0:
        x3=x3/c3
        y3=y3/c3
        temp.append([x3,y3])
    special.append(temp)
    
#print(len(special))    
#print(special)
    
rejected=0

for i in range(len(cord1)):
    if (len(cord1[i])==140 and len(special[i])==3):
        print("Frame: {}".format(name[i]))
        plt.imshow(data[i],cmap='gray')
        for j in range(len(cord1[i])):
            d=plt.Circle((cord1[i][j][0],cord1[i][j][1]),3,color='g',fc='g')
            plt.gca().add_patch(d)
            plt.axis("off")
        for j in range(len(special[i])):
            d=plt.Circle((special[i][j][0],special[i][j][1]),3,color='r',fc='r')
            plt.gca().add_patch(d)
            plt.axis("off")
        plt.show()
    else:
        rejected+=1
        
print("Number of frames rejected due to improper detection of points are {} out of {}".format(rejected,len(cord1)))

#Saving the coordinates for normal and special points

for i in range(len(cord1)):
    cord1[i]=np.array(cord1[i])
cord1=np.array(cord1)

for i in range(len(special)):
    special[i]=np.array(special[i])
special=np.array(special)

df1=pd.DataFrame(cord1)
df2=pd.DataFrame(special)

df1.to_csv('Normal Points.csv')
df2.to_csv('Special Points.csv')

#The above files will be saved in C drive
